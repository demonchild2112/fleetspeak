// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fleetspeak/src/server/components/proto/fleetspeak_components/config.proto

package fleetspeak_components

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Config struct {
	// Mysql connection string. Required.
	//
	// https://github.com/go-sql-driver/mysql#dsn-data-source-name
	MysqlDataSourceName string `protobuf:"bytes,1,opt,name=mysql_data_source_name,json=mysqlDataSourceName,proto3" json:"mysql_data_source_name,omitempty"`
	// The parameters required to stand up an https server. Required.
	HttpsConfig *HttpsConfig `protobuf:"bytes,2,opt,name=https_config,json=httpsConfig,proto3" json:"https_config,omitempty"`
	// If set, expects connections to arrive through a load balance implementing
	// the PROXY protocol.
	//
	// https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt
	ProxyProtocol bool `protobuf:"varint,3,opt,name=proxy_protocol,json=proxyProtocol,proto3" json:"proxy_protocol,omitempty"`
	// If set, only clients reporting this label will be allowed to
	// connect. Meant as a sanity check that the client and server are for the
	// same Fleetspeak installation.
	RequiredLabel string `protobuf:"bytes,4,opt,name=required_label,json=requiredLabel,proto3" json:"required_label,omitempty"`
	// If set, the bind address to listen on to receive notifications from other
	// fleetspeak servers. Optional, but strongly recommended for installations
	// involving multiple servers. e.g. ":8080", "localhost:1234".
	NotificationListenAddress string `protobuf:"bytes,5,opt,name=notification_listen_address,json=notificationListenAddress,proto3" json:"notification_listen_address,omitempty"`
	// If set, other servers will be told to use this address in order to connect
	// with this server's notification port. Has no effect when
	// notification_listen_address is unset.
	NotificationPublicAddress string   `protobuf:"bytes,6,opt,name=notification_public_address,json=notificationPublicAddress,proto3" json:"notification_public_address,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_de4002e87332b919, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetMysqlDataSourceName() string {
	if m != nil {
		return m.MysqlDataSourceName
	}
	return ""
}

func (m *Config) GetHttpsConfig() *HttpsConfig {
	if m != nil {
		return m.HttpsConfig
	}
	return nil
}

func (m *Config) GetProxyProtocol() bool {
	if m != nil {
		return m.ProxyProtocol
	}
	return false
}

func (m *Config) GetRequiredLabel() string {
	if m != nil {
		return m.RequiredLabel
	}
	return ""
}

func (m *Config) GetNotificationListenAddress() string {
	if m != nil {
		return m.NotificationListenAddress
	}
	return ""
}

func (m *Config) GetNotificationPublicAddress() string {
	if m != nil {
		return m.NotificationPublicAddress
	}
	return ""
}

type HttpsConfig struct {
	// The bind address to listen on for client connections, e.g. ":443" or
	// "localhost:1234". Required.
	ListenAddress string `protobuf:"bytes,1,opt,name=listen_address,json=listenAddress,proto3" json:"listen_address,omitempty"`
	// A certificate chain which identifies the server to clients. Must lead to a
	// certificate known to the clients. x509 format. Required.
	Certificates string `protobuf:"bytes,2,opt,name=certificates,proto3" json:"certificates,omitempty"`
	// The private key used to identify the server. Must match the first entry in
	// certificates. x509 format. Required.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// If set, disables long running (streaming) connections. This type of
	// connection causes more active connections but can reduce database load and
	// server->client communications latency.
	DisableStreaming     bool     `protobuf:"varint,4,opt,name=disable_streaming,json=disableStreaming,proto3" json:"disable_streaming,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpsConfig) Reset()         { *m = HttpsConfig{} }
func (m *HttpsConfig) String() string { return proto.CompactTextString(m) }
func (*HttpsConfig) ProtoMessage()    {}
func (*HttpsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_de4002e87332b919, []int{1}
}

func (m *HttpsConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpsConfig.Unmarshal(m, b)
}
func (m *HttpsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpsConfig.Marshal(b, m, deterministic)
}
func (m *HttpsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpsConfig.Merge(m, src)
}
func (m *HttpsConfig) XXX_Size() int {
	return xxx_messageInfo_HttpsConfig.Size(m)
}
func (m *HttpsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HttpsConfig proto.InternalMessageInfo

func (m *HttpsConfig) GetListenAddress() string {
	if m != nil {
		return m.ListenAddress
	}
	return ""
}

func (m *HttpsConfig) GetCertificates() string {
	if m != nil {
		return m.Certificates
	}
	return ""
}

func (m *HttpsConfig) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HttpsConfig) GetDisableStreaming() bool {
	if m != nil {
		return m.DisableStreaming
	}
	return false
}

func init() {
	proto.RegisterType((*Config)(nil), "fleetspeak.components.Config")
	proto.RegisterType((*HttpsConfig)(nil), "fleetspeak.components.HttpsConfig")
}

func init() {
	proto.RegisterFile("fleetspeak/src/server/components/proto/fleetspeak_components/config.proto", fileDescriptor_de4002e87332b919)
}

var fileDescriptor_de4002e87332b919 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xd1, 0x6a, 0xf2, 0x30,
	0x1c, 0xc5, 0xa9, 0x7e, 0x9f, 0x68, 0xd4, 0xe1, 0x32, 0x36, 0x3a, 0x76, 0x23, 0x85, 0x81, 0x30,
	0x68, 0x61, 0xde, 0x0f, 0xc6, 0x36, 0x70, 0x20, 0x43, 0xea, 0x03, 0x84, 0x34, 0xfd, 0xab, 0xc1,
	0x34, 0xa9, 0x49, 0x1c, 0xf3, 0x49, 0xf6, 0x5e, 0x7b, 0xa2, 0xd1, 0xb4, 0xae, 0x3a, 0x77, 0xd7,
	0x9e, 0xf3, 0x3b, 0x3d, 0xff, 0x1e, 0xf4, 0xba, 0x10, 0x00, 0xd6, 0xe4, 0x40, 0xd7, 0x91, 0xd1,
	0x2c, 0x32, 0xa0, 0xdf, 0x41, 0x47, 0x4c, 0x65, 0xb9, 0x92, 0x20, 0xad, 0x89, 0x72, 0xad, 0xac,
	0x8a, 0x6a, 0x8c, 0x1c, 0x78, 0x4c, 0xc9, 0x05, 0x5f, 0x86, 0x0e, 0xc1, 0x97, 0x35, 0x13, 0xd6,
	0x4c, 0xf0, 0xd5, 0x40, 0xad, 0x27, 0xc7, 0xe1, 0x31, 0xba, 0xca, 0x76, 0x66, 0x23, 0x48, 0x4a,
	0x2d, 0x25, 0x46, 0x6d, 0x35, 0x03, 0x22, 0x69, 0x06, 0xbe, 0x37, 0xf4, 0x46, 0x9d, 0xf8, 0xc2,
	0xb9, 0xcf, 0xd4, 0xd2, 0xb9, 0xf3, 0xde, 0x68, 0x06, 0xf8, 0x05, 0xf5, 0x56, 0xd6, 0xe6, 0x86,
	0x94, 0x65, 0x7e, 0x63, 0xe8, 0x8d, 0xba, 0xf7, 0x41, 0xf8, 0x67, 0x5b, 0x38, 0x29, 0xd0, 0xb2,
	0x2e, 0xee, 0xae, 0xea, 0x17, 0x7c, 0x8b, 0xce, 0x72, 0xad, 0x3e, 0x76, 0xc4, 0x1d, 0xcb, 0x94,
	0xf0, 0x9b, 0x43, 0x6f, 0xd4, 0x8e, 0xfb, 0x4e, 0x9d, 0x55, 0x62, 0x81, 0x69, 0xd8, 0x6c, 0xb9,
	0x86, 0x94, 0x08, 0x9a, 0x80, 0xf0, 0xff, 0xb9, 0xd3, 0xfa, 0x7b, 0x75, 0x5a, 0x88, 0xf8, 0x01,
	0xdd, 0x48, 0x65, 0xf9, 0x82, 0x33, 0x6a, 0xb9, 0x92, 0x44, 0x70, 0x63, 0x41, 0x12, 0x9a, 0xa6,
	0x1a, 0x8c, 0xf1, 0xff, 0xbb, 0xcc, 0xf5, 0x21, 0x32, 0x75, 0xc4, 0x63, 0x09, 0x9c, 0xe4, 0xf3,
	0x6d, 0x22, 0x38, 0xfb, 0xc9, 0xb7, 0x4e, 0xf3, 0x33, 0x47, 0x54, 0xf9, 0xe0, 0xd3, 0x43, 0xdd,
	0xc9, 0xf1, 0xdf, 0xfd, 0x3a, 0xa1, 0x5c, 0xb4, 0x2f, 0x8e, 0x6a, 0x03, 0xd4, 0x63, 0xa0, 0xab,
	0x8f, 0x82, 0x71, 0x5b, 0x76, 0xe2, 0x23, 0x0d, 0x0f, 0x50, 0x73, 0x0d, 0x3b, 0xb7, 0x4e, 0x27,
	0x2e, 0x1e, 0xf1, 0x1d, 0x3a, 0x4f, 0xb9, 0xa1, 0x89, 0x00, 0x62, 0xac, 0x06, 0x9a, 0x71, 0xb9,
	0x74, 0xb3, 0xb4, 0xe3, 0x41, 0x65, 0xcc, 0xf7, 0x7a, 0xd2, 0x72, 0xfb, 0x8e, 0xbf, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xe4, 0xa1, 0x39, 0xdd, 0x59, 0x02, 0x00, 0x00,
}
